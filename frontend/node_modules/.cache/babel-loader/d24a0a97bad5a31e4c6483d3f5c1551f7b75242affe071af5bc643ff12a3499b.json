{"ast":null,"code":"module.exports = function (method, arg, inverted) {\n  const msgList = inverted ? negativeMessages : positiveMessages;\n  return msgList[method] && msgList[method](arg);\n};\nconst positiveMessages = {\n  min: num => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  max: num => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  letters: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} letter${pluralify(num)}`;\n  },\n  digits: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} digit${pluralify(num)}`;\n  },\n  uppercase: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} uppercase letter${pluralify(num)}`;\n  },\n  lowercase: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} lowercase letter${pluralify(num)}`;\n  },\n  symbols: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} symbol${pluralify(num)}`;\n  },\n  spaces: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} space${pluralify(num)}`;\n  },\n  oneOf: list => `The string should be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: pattern => `The string should have pattern '${pattern}'`,\n  not: pattern => `The string should not have pattern '${pattern}'`,\n  usingPlugin: fn => `The string should not violate ${fn.name || 'plugin'}`\n};\nconst negativeMessages = {\n  min: num => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  max: num => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  letters: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} letter${pluralify(num)}`;\n  },\n  digits: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} digit${pluralify(num)}`;\n  },\n  uppercase: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} uppercase letter${pluralify(num)}`;\n  },\n  lowercase: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} lowercase letter${pluralify(num)}`;\n  },\n  symbols: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} symbol${pluralify(num)}`;\n  },\n  spaces: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} space${pluralify(num)}`;\n  },\n  oneOf: list => `The string should not be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: pattern => `The string should not have pattern '${pattern}'`,\n  not: pattern => `The string should have pattern '${pattern}'`,\n  usingPlugin: fn => `The string should violate ${fn.name || 'plugin'}`\n};\nfunction pluralify(num) {\n  return num === 1 ? '' : 's';\n}","map":{"version":3,"names":["module","exports","method","arg","inverted","msgList","negativeMessages","positiveMessages","min","num","pluralify","max","letters","arguments","length","undefined","digits","uppercase","lowercase","symbols","spaces","oneOf","list","slice","join","has","pattern","not","usingPlugin","fn","name"],"sources":["E:/ITP Project/itp_logRegi/itp_t/frontend/node_modules/password-validator/src/validationMessages.js"],"sourcesContent":["module.exports = function (method, arg, inverted) {\n  const msgList = inverted ? negativeMessages : positiveMessages;\n  return msgList[method] && msgList[method](arg);\n};\n\nconst positiveMessages = {\n  min: (num) => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  max: (num) => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  letters: (num = 1) => `The string should have a minimum of ${num} letter${pluralify(num)}`,\n  digits: (num = 1) => `The string should have a minimum of ${num} digit${pluralify(num)}`,\n  uppercase: (num = 1) => `The string should have a minimum of ${num} uppercase letter${pluralify(num)}`,\n  lowercase: (num = 1) => `The string should have a minimum of ${num} lowercase letter${pluralify(num)}`,\n  symbols: (num = 1) => `The string should have a minimum of ${num} symbol${pluralify(num)}`,\n  spaces: (num = 1) => `The string should have a minimum of ${num} space${pluralify(num)}`,\n  oneOf: (list) => `The string should be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: (pattern) => `The string should have pattern '${pattern}'`,\n  not: (pattern) => `The string should not have pattern '${pattern}'`,\n  usingPlugin: (fn) => `The string should not violate ${fn.name || 'plugin'}`,\n};\n\nconst negativeMessages = {\n  min: (num) => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  max: (num) => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  letters: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} letter${pluralify(num)}`,\n  digits: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} digit${pluralify(num)}`,\n  uppercase: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} uppercase letter${pluralify(num)}`,\n  lowercase: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} lowercase letter${pluralify(num)}`,\n  symbols: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} symbol${pluralify(num)}`,\n  spaces: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} space${pluralify(num)}`,\n  oneOf: (list) => `The string should not be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: (pattern) => `The string should not have pattern '${pattern}'`,\n  not: (pattern) => `The string should have pattern '${pattern}'`,\n  usingPlugin: (fn) => `The string should violate ${fn.name || 'plugin'}`,\n};\n\nfunction pluralify(num) {\n  return num === 1 ? '' : 's';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}