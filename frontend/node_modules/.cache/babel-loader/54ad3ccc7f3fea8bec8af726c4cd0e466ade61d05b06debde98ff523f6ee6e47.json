{"ast":null,"code":"/* eslint-disable no-unused-vars */\nvar lib = require('./lib');\nvar error = require('./constants').error;\nvar getValidationMessage = require('./validationMessages');\n\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\nfunction _validateLength(num) {\n  const len = Number(num);\n  if (isNaN(len) || !Number.isInteger(len) || len < 1) {\n    throw new Error(error.length);\n  }\n}\n\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @returns {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} method - Property name\n * @param {array} arguments - arguments for the func property\n * @returns {PasswordValidator}\n */\nfunction _register(method, args, description) {\n  // Add property to the schema\n  this.properties.push({\n    method,\n    arguments: args,\n    description\n  });\n  return this;\n}\nclass PasswordValidator {\n  /**\n   * Creates a password-validator schema\n   *\n   * @constructor\n   */\n  constructor() {\n    this.properties = [];\n  }\n\n  /**\n   * Method to validate the password against schema\n   *\n   * @param {string} pwd - password to validate\n   * @param {object} [options] - optional options to configure validation\n   * @param {boolean} [options.list] - asks for a list of validation\n   *           failures instead of just true/false\n   * @param {boolean} [options.details] - asks for more details about\n   *           failed validations including arguments, and error messages\n   * @returns {boolean|array} Boolean value indicting the validity\n   *           of the password as per schema, if 'options.list' or\n   *           'options.details' is not set. Otherwise, it returns an\n   *           array of property names which failed validations\n   */\n  validate(pwd, options) {\n    this.list = Boolean(options && options.list);\n    this.details = Boolean(options && options.details);\n    this.password = String(pwd);\n    this.positive = true;\n    if (this.list || this.details) {\n      return this.properties.reduce((errorList, property) => {\n        // Applies all validations defined in lib one by one\n        if (!_isPasswordValidFor.call(this, property)) {\n          // If the validation for a property fails,\n          // add it to the error list\n          var detail = property.method;\n          // If the details option was provided,\n          // return a rich object including validation message\n          if (this.details) {\n            detail = {\n              validation: property.method\n            };\n            if (property.arguments && property.arguments[0]) {\n              detail.arguments = property.arguments[0];\n            }\n            if (!this.positive && property.method !== 'not') {\n              detail.inverted = true;\n            }\n            var description = property.arguments && property.arguments[1];\n            var validationMessage = description || getValidationMessage(property.method, detail.arguments, detail.inverted);\n            detail.message = validationMessage;\n          }\n          return errorList.concat(detail);\n        }\n        return errorList;\n      }, []);\n    }\n    return this.properties.every(_isPasswordValidFor.bind(this));\n  }\n\n  /**\n   * Rule to mandate the presence of letters in the password\n   *\n   * @param {number} [count] - minimum number of letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  letters(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'letters', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of digits in the password\n   *\n   * @param {number} [count] - minimum number of digits required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  digits(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'digits', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of symbols in the password\n   *\n   * @param {number} [count] - minimum number of symbols required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  symbols(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'symbols', arguments);\n  }\n\n  /**\n   * Rule to specify a minimum length of the password\n   *\n   * @param {number} num - minimum length\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  min(num, description) {\n    _validateLength(num);\n    return _register.call(this, 'min', arguments);\n  }\n\n  /**\n   * Rule to specify a maximum length of the password\n   *\n   * @param {number} num - maximum length\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  max(num, description) {\n    _validateLength(num);\n    return _register.call(this, 'max', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of lowercase letters in the password\n   *\n   * @param {number} [count] - minimum number of lowercase letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  lowercase(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'lowercase', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of uppercase letters in the password\n   *\n   * @param {number} [count] - minimum number of uppercase letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  uppercase(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'uppercase', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of space in the password\n   * It can be used along with 'not' to not allow spaces\n   * in the password\n   *\n   * @param {number} [count] - minimum number of spaces required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  spaces(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'spaces', arguments);\n  }\n\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'has' is also used\n   * to make the api readable and chainable\n   *\n   * @param {string|RegExp} [pattern] - pattern to match\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  has(pattern, description) {\n    return _register.call(this, 'has', arguments);\n  }\n\n  /**\n   * Rule to invert the next applied rules.\n   * All the rules applied after 'not' will have opposite effect,\n   * until 'has' rule is applied\n   *\n   * @param {string|RegExp} [pattern] - pattern to not match\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  not(pattern, description) {\n    return _register.call(this, 'not', arguments);\n  }\n\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'is' is also used\n   * to make the api readable and chainable\n   *\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  is() {\n    return _register.call(this, 'is', arguments);\n  }\n\n  /**\n   * Rule to whitelist words to be used as password\n   *\n   * @param {array} list - list of values allowed\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  oneOf(list, description) {\n    return _register.call(this, 'oneOf', arguments);\n  }\n\n  /**\n   * Insert a plugin function into the validation chain\n   *\n   * @param {Plugin} fn  - A plugin function\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  usingPlugin(fn, description) {\n    if (typeof fn !== 'function') {\n      throw new Error(error.invalidPlugin);\n    }\n    return _register.call(this, 'usingPlugin', arguments);\n  }\n}\nmodule.exports = PasswordValidator;\n\n/**\n * @callback Plugin\n * @param password Password injected by the library\n */","map":{"version":3,"names":["lib","require","error","getValidationMessage","_validateLength","num","len","Number","isNaN","isInteger","Error","length","_isPasswordValidFor","property","method","apply","arguments","_register","args","description","properties","push","PasswordValidator","constructor","validate","pwd","options","list","Boolean","details","password","String","positive","reduce","errorList","call","detail","validation","inverted","validationMessage","message","concat","every","bind","letters","count","digits","symbols","min","max","lowercase","uppercase","spaces","has","pattern","not","is","oneOf","usingPlugin","fn","invalidPlugin","module","exports"],"sources":["E:/ITP Project/itp_logRegi/itp_t/frontend/node_modules/password-validator/src/index.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nvar lib = require('./lib');\nvar error = require('./constants').error;\nvar getValidationMessage = require('./validationMessages');\n\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\nfunction _validateLength(num) {\n  const len = Number(num);\n  if (isNaN(len) || !Number.isInteger(len) || len < 1) {\n    throw new Error(error.length);\n  }\n}\n\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @returns {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} method - Property name\n * @param {array} arguments - arguments for the func property\n * @returns {PasswordValidator}\n */\nfunction _register(method, args, description) {\n  // Add property to the schema\n  this.properties.push({ method, arguments: args, description });\n  return this;\n}\n\nclass PasswordValidator {\n  /**\n   * Creates a password-validator schema\n   *\n   * @constructor\n   */\n  constructor() {\n    this.properties = [];\n  }\n\n  /**\n   * Method to validate the password against schema\n   *\n   * @param {string} pwd - password to validate\n   * @param {object} [options] - optional options to configure validation\n   * @param {boolean} [options.list] - asks for a list of validation\n   *           failures instead of just true/false\n   * @param {boolean} [options.details] - asks for more details about\n   *           failed validations including arguments, and error messages\n   * @returns {boolean|array} Boolean value indicting the validity\n   *           of the password as per schema, if 'options.list' or\n   *           'options.details' is not set. Otherwise, it returns an\n   *           array of property names which failed validations\n   */\n  validate(pwd, options) {\n    this.list = Boolean(options && options.list);\n    this.details = Boolean(options && options.details);\n    this.password = String(pwd);\n\n    this.positive = true;\n\n    if (this.list || this.details) {\n      return this.properties.reduce((errorList, property) => {\n        // Applies all validations defined in lib one by one\n        if (!_isPasswordValidFor.call(this, property)) {\n          // If the validation for a property fails,\n          // add it to the error list\n          var detail = property.method;\n          // If the details option was provided,\n          // return a rich object including validation message\n          if (this.details) {\n            detail = { validation: property.method };\n            if (property.arguments && property.arguments[0]) {\n              detail.arguments = property.arguments[0];\n            }\n\n            if (!this.positive && property.method !== 'not') {\n              detail.inverted = true;\n            }\n            var description = property.arguments && property.arguments[1];\n            var validationMessage = description || getValidationMessage(property.method, detail.arguments, detail.inverted);\n            detail.message = validationMessage;\n          }\n\n          return errorList.concat(detail);\n        }\n        return errorList;\n      }, []);\n    }\n    return this.properties.every(_isPasswordValidFor.bind(this));\n  }\n\n  /**\n   * Rule to mandate the presence of letters in the password\n   *\n   * @param {number} [count] - minimum number of letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  letters(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'letters', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of digits in the password\n   *\n   * @param {number} [count] - minimum number of digits required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  digits(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'digits', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of symbols in the password\n   *\n   * @param {number} [count] - minimum number of symbols required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  symbols(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'symbols', arguments);\n  }\n\n  /**\n   * Rule to specify a minimum length of the password\n   *\n   * @param {number} num - minimum length\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  min(num, description) {\n    _validateLength(num);\n    return _register.call(this, 'min', arguments);\n  }\n\n  /**\n   * Rule to specify a maximum length of the password\n   *\n   * @param {number} num - maximum length\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  max(num, description) {\n    _validateLength(num);\n    return _register.call(this, 'max', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of lowercase letters in the password\n   *\n   * @param {number} [count] - minimum number of lowercase letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  lowercase(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'lowercase', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of uppercase letters in the password\n   *\n   * @param {number} [count] - minimum number of uppercase letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  uppercase(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'uppercase', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of space in the password\n   * It can be used along with 'not' to not allow spaces\n   * in the password\n   *\n   * @param {number} [count] - minimum number of spaces required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  spaces(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'spaces', arguments);\n  }\n\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'has' is also used\n   * to make the api readable and chainable\n   *\n   * @param {string|RegExp} [pattern] - pattern to match\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  has(pattern, description) {\n    return _register.call(this, 'has', arguments);\n  }\n\n  /**\n   * Rule to invert the next applied rules.\n   * All the rules applied after 'not' will have opposite effect,\n   * until 'has' rule is applied\n   *\n   * @param {string|RegExp} [pattern] - pattern to not match\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  not(pattern, description) {\n    return _register.call(this, 'not', arguments);\n  }\n\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'is' is also used\n   * to make the api readable and chainable\n   *\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  is() {\n    return _register.call(this, 'is', arguments);\n  }\n\n  /**\n   * Rule to whitelist words to be used as password\n   *\n   * @param {array} list - list of values allowed\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  oneOf(list, description) {\n    return _register.call(this, 'oneOf', arguments);\n  }\n\n  /**\n   * Insert a plugin function into the validation chain\n   *\n   * @param {Plugin} fn  - A plugin function\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  usingPlugin(fn, description) {\n    if (typeof fn !== 'function') {\n      throw new Error(error.invalidPlugin);\n    }\n    return _register.call(this, 'usingPlugin', arguments);\n  }\n}\n\nmodule.exports = PasswordValidator;\n\n/**\n * @callback Plugin\n * @param password Password injected by the library\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}