{"ast":null,"code":"/**\n * Generic method to test regex\n *\n * @private\n * @param {string} regex - regex to test\n *                           with password\n */\nvar regex = require('./constants').regex;\nfunction _process(regexp, repeat) {\n  if (repeat && repeat > 1) {\n    const parsedRepeat = parseInt(repeat, 10);\n    return new RegExp(regexp + '{' + parsedRepeat + ',}').test(this.password) === this.positive;\n  }\n  return new RegExp(regexp).test(this.password) === this.positive;\n}\nmodule.exports = {\n  /**\n   * Method to invert the next validations\n   *\n   * @param {RegExp} [symbol] - custom Regex which should not be present\n   */\n  not: function not(symbol) {\n    this.positive = false;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n  /**\n   * Method to invert the effects of not()\n   *\n   * @param {RegExp} [symbol] - custom Regex which should be present\n   */\n  has: function has(symbol) {\n    this.positive = true;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n  /**\n   * Method to invert the effects of not() and\n   * to make the api readable and chainable\n   *\n   */\n  is: function is() {\n    this.positive = true;\n    return true;\n  },\n  /**\n   * Method to specify a minimum length\n   *\n   * @param {number} num - minimum length\n   */\n  min: function min(num) {\n    return this.password.length >= num;\n  },\n  /**\n   * Method to specify a maximum length\n   *\n   * @param {number} num - maximum length\n   */\n  max: function max(num) {\n    return this.password.length <= num;\n  },\n  /**\n   * Method to validate the presence of digits\n   *\n   * @param {number} repeat - count of required digits\n   */\n  digits: function digits(repeat) {\n    return _process.call(this, regex.digits, repeat);\n  },\n  /**\n   * Method to validate the presence of letters\n   *\n   * @param {number} repeat - count of required letters\n   */\n  letters: function letters(repeat) {\n    return _process.call(this, regex.letters, repeat);\n  },\n  /**\n   * Method to validate the presence of uppercase letters\n   *\n   * @param {number} repeat - count of required uppercase letters\n   */\n  uppercase: function uppercase(repeat) {\n    if (repeat && repeat > 1) {\n      let characterIndex = 0;\n      let upperCaseLetters = 0;\n      while (upperCaseLetters < repeat && characterIndex < this.password.length) {\n        const currentLetter = this.password.charAt(characterIndex);\n        if (currentLetter !== currentLetter.toLowerCase()) {\n          upperCaseLetters++;\n        }\n        characterIndex++;\n      }\n      return upperCaseLetters === repeat === this.positive;\n    }\n    return this.password !== this.password.toLowerCase() === this.positive;\n  },\n  /**\n   * Method to validate the presence of lowercase letters\n   *\n   * @param {number} repeat - count of required lowercase letters\n   */\n  lowercase: function lowercase(repeat) {\n    if (repeat && repeat > 1) {\n      let characterIndex = 0;\n      let lowerCaseLetters = 0;\n      while (lowerCaseLetters < repeat && characterIndex < this.password.length) {\n        const currentLetter = this.password.charAt(characterIndex);\n        if (currentLetter !== currentLetter.toUpperCase()) {\n          lowerCaseLetters++;\n        }\n        characterIndex++;\n      }\n      return lowerCaseLetters === repeat === this.positive;\n    }\n    return this.password !== this.password.toUpperCase() === this.positive;\n  },\n  /**\n   * Method to validate the presence of symbols\n   *\n   * @param {number} repeat - count of required symbols\n   */\n  symbols: function symbols(repeat) {\n    return _process.call(this, regex.symbols, repeat);\n  },\n  /**\n   * Method to validate the presence of space\n   *\n   * @param {number} repeat - count of required spaces\n   */\n  spaces: function spaces(repeat) {\n    return _process.call(this, regex.spaces, repeat);\n  },\n  /**\n   * Method to provide pre-defined values for password\n   *\n   * @param {array} list - list of values allowed\n   */\n  oneOf: function oneOf(list) {\n    return list.indexOf(this.password) >= 0 === this.positive;\n  },\n  /**\n   * Method to run a plugin function for password\n   *\n   * @param {function} plugin - A plugin function\n   */\n  usingPlugin: function usingPlugin(fn) {\n    try {\n      const result = fn.call({}, this.password);\n      return Boolean(result) === this.positive;\n    } catch (err) {\n      return false;\n    }\n  }\n};","map":{"version":3,"names":["regex","require","_process","regexp","repeat","parsedRepeat","parseInt","RegExp","test","password","positive","module","exports","not","symbol","call","has","is","min","num","length","max","digits","letters","uppercase","characterIndex","upperCaseLetters","currentLetter","charAt","toLowerCase","lowercase","lowerCaseLetters","toUpperCase","symbols","spaces","oneOf","list","indexOf","usingPlugin","fn","result","Boolean","err"],"sources":["E:/ITP Project/itp_logRegi/itp_t/frontend/node_modules/password-validator/src/lib.js"],"sourcesContent":["/**\n * Generic method to test regex\n *\n * @private\n * @param {string} regex - regex to test\n *                           with password\n */\nvar regex = require('./constants').regex;\n\nfunction _process(regexp, repeat) {\n  if (repeat && repeat > 1) {\n    const parsedRepeat = parseInt(repeat, 10);\n    return new RegExp(regexp + '{' + parsedRepeat + ',}').test(this.password) === this.positive;\n  }\n  return new RegExp(regexp).test(this.password) === this.positive;\n}\n\nmodule.exports = {\n\n  /**\n   * Method to invert the next validations\n   *\n   * @param {RegExp} [symbol] - custom Regex which should not be present\n   */\n  not: function not(symbol) {\n    this.positive = false;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not()\n   *\n   * @param {RegExp} [symbol] - custom Regex which should be present\n   */\n  has: function has(symbol) {\n    this.positive = true;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not() and\n   * to make the api readable and chainable\n   *\n   */\n  is: function is() {\n    this.positive = true;\n    return true;\n  },\n\n  /**\n   * Method to specify a minimum length\n   *\n   * @param {number} num - minimum length\n   */\n  min: function min(num) {\n    return this.password.length >= num;\n  },\n\n  /**\n   * Method to specify a maximum length\n   *\n   * @param {number} num - maximum length\n   */\n  max: function max(num) {\n    return this.password.length <= num;\n  },\n\n  /**\n   * Method to validate the presence of digits\n   *\n   * @param {number} repeat - count of required digits\n   */\n  digits: function digits(repeat) {\n    return _process.call(this, regex.digits, repeat);\n  },\n\n  /**\n   * Method to validate the presence of letters\n   *\n   * @param {number} repeat - count of required letters\n   */\n  letters: function letters(repeat) {\n    return _process.call(this, regex.letters, repeat);\n  },\n\n  /**\n   * Method to validate the presence of uppercase letters\n   *\n   * @param {number} repeat - count of required uppercase letters\n   */\n  uppercase: function uppercase(repeat) {\n    if (repeat && repeat > 1) {\n      let characterIndex = 0;\n      let upperCaseLetters = 0;\n\n      while ((upperCaseLetters < repeat) && (characterIndex < this.password.length)) {\n        const currentLetter = this.password.charAt(characterIndex);\n        if (currentLetter !== currentLetter.toLowerCase()) {\n          upperCaseLetters++;\n        }\n        characterIndex++;\n      }\n\n      return (upperCaseLetters === repeat) === this.positive;\n    }\n    return (this.password !== this.password.toLowerCase()) === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of lowercase letters\n   *\n   * @param {number} repeat - count of required lowercase letters\n   */\n  lowercase: function lowercase(repeat) {\n    if (repeat && repeat > 1) {\n      let characterIndex = 0;\n      let lowerCaseLetters = 0;\n\n      while ((lowerCaseLetters < repeat) && (characterIndex < this.password.length)) {\n        const currentLetter = this.password.charAt(characterIndex);\n        if (currentLetter !== currentLetter.toUpperCase()) {\n          lowerCaseLetters++;\n        }\n        characterIndex++;\n      }\n\n      return (lowerCaseLetters === repeat) === this.positive;\n    }\n    return (this.password !== this.password.toUpperCase()) === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of symbols\n   *\n   * @param {number} repeat - count of required symbols\n   */\n  symbols: function symbols(repeat) {\n    return _process.call(this, regex.symbols, repeat);\n  },\n\n  /**\n   * Method to validate the presence of space\n   *\n   * @param {number} repeat - count of required spaces\n   */\n  spaces: function spaces(repeat) {\n    return _process.call(this, regex.spaces, repeat);\n  },\n\n  /**\n   * Method to provide pre-defined values for password\n   *\n   * @param {array} list - list of values allowed\n   */\n  oneOf: function oneOf(list) {\n    return list.indexOf(this.password) >= 0 === this.positive;\n  },\n\n  /**\n   * Method to run a plugin function for password\n   *\n   * @param {function} plugin - A plugin function\n   */\n  usingPlugin: function usingPlugin(fn) {\n    try {\n      const result = fn.call({}, this.password);\n      return Boolean(result) === this.positive;\n    } catch (err) {\n      return false;\n    }\n  }\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}